Spring AOP 용어

 1. Target : 핵심사항(Core)가 구현된 객체
 2. JoinPoint : 공통관심사항이 적용될 수 있는 지점(ex: 메소드 호출시, 객체 생성시 등)  ** spring에서는 메소드만 
 3. PointCut : JoinPoint 중 실제 공통사항이 적용될 대상을 지정
 4. Advise 
    - 공통관심사항(Cross-Cutting) 구현 코드 + 적용시점
    - 적용시점 : 핵심로직 실행 전, 후, 정상종료 후, 비정상 종료 후, 전/후가 있다
 5. Weaving : JoinPoint의 Advice에 Aspect를 주입하는 코드를 만드는 것(컴파일 시점, 런타임 시점 Weaving이 있다)

---------------------------------------------------------------------------------------------------- 
Spring에서 AOP 구현 3가지 방법

 1. POJO Class를 이용한 AOP 구현
 2. 스프링 API를 이용한 AOP 구현
 3. 어노테이션(Annotation)을 이용한 AOP 구현
  
  
----------------------------------------------------------------------------------------------------
POJO 기반 AOP 구현

 1. 설정 파일에 AOP 설정
    - XML 스키마 확장기법을 통해 설정파일을 작성한다. 
 2. POJO 기반 공통 관심사항 로직 클래스 작성
 3. XML 스키마를 이용한 AOP 설정
    - aop 네임스페이스와 XML 스키마 추가
    - ex)
    <?xml version="1.0" encoding="UTF-8"?>
    <bean xmlns="http://www.springframework.org/schema/beans"
    	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	  xmlns:aop="http://www.springframework.org/schema/aop"
    	  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    	  					  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
   	</bean>
 4. XML 스키마를 이용한 AOP 설정 예
    - ex)
    <bean id="writelog" class="org.kosta.spring.LogAspect" />
    
    <aop:config>
    	<aop:pointcut id="publicmethod" expression="execution(public*org.kosta.spring..*(..))" />
    	<aop:aspect id="loginAspect" ref="writelog">
    		<aop:around pointcuf-ref="publicmethod" method="logging" />
    	</aop:aspect>
    </aop:config>
   	
   	<bean id="targetclass" class="org.kosta.TargetClass" />
   
 5. AOP 설정 태그
    - <aop:config> : aop설정의 root 태그, Aspect 설정들의 묶음
    - <aop:aspect> : Aspect 설정 - 하나의 Aspect 설정
      Aspect가 여러 개의 <aop:aspect> 태그가 여러개 온다
    - <aop:pointcut> : Advice에서 참조할 pointcut 설정
    - Advice 설정 태그들
      <aop:before> - 메소드 실행 전 실행될 Advice
      <aop:after-returning> - 메소드 정상 실행 후 실행될 Advice
      <aop:after-throwing> - 메소드에서 예외 발생 시 실행될 Advice
      <aop:after> - 메소드 정상 또는 예외 발생 상관없이 실행될 Advice
      <aop:around> - 모든 시점에서 적용시킬 수 있는 Advice 구현
 
 6. 예졔
 
 	1) Service.java
 	public interface Service {
 		public abstract void register();
 		public abstract void modify();
 	}    
 	
 	2) CustomerService.java
 	public class CustomerService {
 		public void register() {
 			System.out.println("고객 등록 처리");
 		}
 		public void modify() {
 			System.out.println("고객 정보 수정 처리");
 		}
 	} 
 	
 	3) CustomerProxy.java
 	public class CustomerProxy implements Service {
 		@Override
 		public void register() {
 			Logger l = new Logger();		//공통로직
 			l.log("고객 등록 시작");
 			CustomerService cs = new CustomerService();
 			cs.register();
 		}
 		@Override
 		public void modify() {
 			CustomerService cs = new CustomerService();
 			cs.modify();
 			Logger l = new Logger();
 			l.log("고객 정보 수정 완료");
 		}
 	}
 	
 	4) Logger.java
 	public class Logger {
 		public void log(String message) {
 			System.out.println(message);
 		}
 	}
 	
 	5) TestAOP.java
 	public class TestAOP {
 		public static void main(String[] args) {
 			client(new CustomerProxy());
 		}
 		
 		//client 코드 - 고객 관련 작업 처리
 		public static void client(Service service) {
 			service.register();
 			System.out.println("*********** client ************");
 			service.modify();
 		}
 	}
   	